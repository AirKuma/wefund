<?php

namespace App\Http\Controllers\Auction;

use Illuminate\Http\Request;
use Validator;
use App\Http\Requests\Auction\ItemRequest;
use App\Http\Requests\Comment\CommentRequest;
use App\Http\Requests;
use App\Http\Controllers\Controller;
use App\User;
use App\Category;
use App\College;
use Auth;
use Carbon\Carbon;
use Repositories\Contracts\ItemRepositoryInterface;
use Repositories\Contracts\ImageRepositoryInterface;
use Repositories\Contracts\UserRepositoryInterface;



class ItemController extends Controller
{
    protected $items;
    protected $images;
    protected $users;

    public function __construct(ItemRepositoryInterface $items, ImageRepositoryInterface $images, UserRepositoryInterface $users)
    {
        $this->middleware('auth', ['except' => 'getShowItem']);
        $this->middleware('creater', ['only' => 'postBidItem']);
        $this->middleware('profile',['except' => ['getIndex','getShowItem','getAdmin','getAdminAPI','postComment','postReport']]);
        $this->items = $items;
        $this->images = $images;
        $this->users = $users;
    }


    /**
     * Display a listing of the resource.
     *
     * @return \Illuminate\Http\Response
     */
    public function getIndex($college,$auction,$type)
    {
        $colleges = College::all()/*->lists('name', 'id')*/;
        $college = College::where('acronym',$college);

        //拍賣or競投
        $itemtype = 0;
        $category = Category::where('type','bid_items')->get();
        if($auction=='seek'){
            $itemtype = 1;
            $category = Category::where('type','seek_items')->get();
        }

        $items = $college->first()->items()->where('disabled',0)->where('type',$itemtype)->where('end_time','>',Carbon::now());
        //$items = $this->items->all()->where('disabled',0)/*->where('end_time','<',Carbon::now())*/;
        //return dd($items->first()->end_time == Carbon::now());

        //判斷搜尋者性別做搜尋條件(traget的whereIN= =)
        //$this->items = $items;
        //$items = $this->items->whereIn('target',[0,1]);

        if(Auth::check()){
            $user = $this->users->find(Auth::id());
            if($user->gender==1)
                $items = $items->whereIn('target',[0,1])->get();
            else
                $items = $items->whereIn('target',[0,2])->get();
        }else
             $items = $items->whereIn('target',[0,1,2])->get();

        //分類搜尋
        /*$category_id =  \Request::input('category_id');*/
        //未分類個數
        $itemall = $items;

        if($type!='all' && $type!='my'){
            if($auction=='bid')
                $category_id =  Category::where('type','bid_items')->where('en_name',$type)->first()->id;
            else
                $category_id =  Category::where('type','seek_items')->where('en_name',$type)->first()->id;
            $items = $items->where('category_id',$category_id);
        }
        elseif($type=='my')
            //$items = $items->users()->where('user_id',$user->id)->get();
            $items = Auth::user()->items()->where('type',$itemtype)->where('disabled',0)->where('end_time','>',Carbon::now())->groupBy('items.id')->get();
        //return dd($items);
        return View('auctions.items.index', compact('items','category','type','colleges','auction','college','itemall'));
    }

    /**
     * Show the form for creating a new resource.
     *
     * @return \Illuminate\Http\Response
     */
    public function getCreateItem($auction)
    {
        $type = 'bid_items';
        //競投
        if($auction=='seek')
            $type = 'seek_items';

        $category = Category::all()->where('type',$type)->lists('name', 'id');
        return View('auctions.items.create',compact('category','auction'));
    }

    /**
     * Store a newly created resource in storage.
     *
     * @param  \Illuminate\Http\Request  $request
     * @return \Illuminate\Http\Response
     */
    public function postCreateItem(ItemRequest $request,$auction)
    {
        //Validator for checking rhat limit 3 file upload
        $start_time = Carbon::now();
        $end_time = Carbon::now()->addDays(30);
        //return dd($request->all());
        $rules = [];
        $nbr = count($request->image) - 1;
        foreach(range(0, $nbr) as $index) {
            $rules['image.' . $index] = 'required|max:4000';
        }
        $validator = Validator::make($request->all(), $rules);

        if ($validator->fails()) {
            return redirect()->back()
                    ->withErrors($validator)
                    ->withInput();
        }

        $image_num = count($request->image);
        if($image_num > 3) {
            return redirect()->back()->withInput()->withErrors('Cannot Upload 3');
        }

        //find a user 
        $user = $this->users->find(Auth::id());
        // create a item
        $item = $user->item()->create($request->all());
        $item->start_time = $start_time;
        $item->end_time = $end_time;
        if($auction=='seek')
            $item->type = 1;
        $item->save();
        // create a album of item.
        $album = $item->albums()->create(['user_id' => Auth::id(), 'name' => $item->name]);
        // upload file and return file path
        $images = $this->images->uploadImage($request->all(), Auth::id(), 'images/auctions'); 
        
        // crate a images of album
        foreach($images as $image) {
        $image = $album->images()->create([
            'file_name' => $image->basename,
            'file_mime' => $image->mime,
            'file_path'  => '/images/auctions/' . $image->basename,
            'description' => $request->description
        ]);
        }


	//Auto Post to Group
	$url = 'https://graph.facebook.com/v2.6/980383791993468/feed?';
	$myvars =  'access_token=EAACEdEose0cBAGIirNoLunHcSpoACbT2IEb4MGmFZC9qBhQryGtgand9VY7WZCKYZA8CsQ9jMH6vwVpOWRtyz202Lz72CLPQXw3lzDk5ifdYo5s7KBp45JcGZCuOjpaW7xbZAs5SeIZCFDy4kYqD8jHxETNaV1e1Bgx7zyt09yaLjSFdpm1mlj&message=testapi';
//echo $url;
//echo $myvars;

	$ch = curl_init($url);
	curl_setopt($ch, CURLOPT_POST, 1);
	curl_setopt($ch, CURLOPT_POSTFIELDS, $myvars);
	curl_setopt($ch, CURLOPT_FOLLOWLOCATION, 1);
	curl_setopt($ch, CURLOPT_HEADER, 0);
	curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);

	return dd($response = curl_exec($ch));




        return redirect()->route('get.auction.item.show',['auction' =>  $auction,'id' =>  $item->id ]);


    }

    /**
     * Display the specified resource.
     *
     * @param  int  $id
     * @return \Illuminate\Http\Response
     */
    public function getShowItem($auction,$id)
    {
        $type = 0;
        if($auction=='seek')
            $type = 1;
        $item = $this->items->whereId($id)->where('type',$type)->first();

        $images = $item->albums()->first()->images()->get();
        $owner = $item->user()->first();
        $now = Carbon::now();

        $item_user = $item->users()
            ->orderBy('item_user.price', 'desc')
            ->get();
        //競投
        if($auction=='seek')
            $item_user = $item->users()
            ->orderBy('item_user.price', 'asc')
            ->get();

        //點閱率
        $item->hitpoint = $item->hitpoint+1;
        $item->save();
        //$item_user = Auth::user();
        //return $item_user;
        //return $item_user;
        //return $item->start_time->diffForHumans($item->end_time);
        //00 天 02 時 48 分 22 秒結束
        if(Auth::check())
             return View('auctions.items.show', compact('item', 'images', 'owner', 'item_user','now','auction'));  
        else
             return View('auctions.items.sshow', compact('item', 'images', 'owner', 'item_user','now','auction'));  
    }

    /**
     * Show the form for editing the specified resource.
     *
     * @param  int  $id
     * @return \Illuminate\Http\Response
     */
    public function getEditItem($auction,$id)
    {
        $type = 0;
        if($auction=='seek')
            $type = 1;
        $item = $this->items->whereId($id)->where('type',$type)->first();
        //$item = $this->items->find($id);
        if($item->user()->first()->id == Auth::id()){
            $type = 'bid_items';
            //競投
            if($auction=='seek')
                $type = 'seek_items';

            $category = Category::all()->where('type',$type)->lists('name', 'id');
            return View('auctions.items.edit', compact('item','category','auction'));
        }
        //return dd($item->user()->first()->id);
        //return View('users.profile', compact('profile'), compact('majors'));
    }

    /**
     * Update the specified resource in storage.
     *
     * @param  \Illuminate\Http\Request  $request
     * @param  int  $id
     * @return \Illuminate\Http\Response
     */
    public function patchUpdateItem(ItemRequest $request,$id)
    {
        $item_type = $this->items->find($id)->type;
        $item = $this->items->update($request->except('image','_method', '_token'), $id);

        return redirect()->route('get.auction.item.show', ['auction' =>  $item_type==0 ? 'bid' : 'seek','id' =>  $id ]);
    }

    /**
     * Remove the specified resource from storage.
     *
     * @param  int  $id
     * @return \Illuminate\Http\Response
     */
    public function destroyItem($id)
    {

        $images = $this->items->find($id)->albums->first()->images()->get();
        //return $images->first()->file_path;
        foreach ($images as $image) {
            $this->images->deleteImageFile($image->toArray(), 'images/auctions');
        }
        //return dd($images);
        $item_type = $this->items->find($id)->type;
        $album = $this->items->find($id)->albums->first()->delete();
        $item = $this->items->delete($id);
        return redirect()->route('get.auction.index',['college' =>  Auth::check() ? Auth::user()->college()->first()->acronym : 'fju','auction' => $item_type==0 ? 'bid':'seek','type' => 'all']);
    }

    public function getAdmin($auction)
    {
        $now = Carbon::now();
        $user = $this->users->find(Auth::id());
        //拍賣or競投
        $type = 0;
        if($auction=='seek')
            $type = 1;

        $items = $user->item()->where('type',$type)->get();
        return View('auctions.items.admin', compact('items','auction','now'));
    }

    public function postUploadItemImage(Request $request, $id)
    {

        $rules = [];
        $nbr = count($request->image) - 1;
        foreach(range(0, $nbr) as $index) {
            $rules['image.' . $index] = 'required|max:4000';
        }
        $validator = Validator::make($request->all(), $rules);

        if ($validator->fails()) {
            return redirect()->back()
                    ->withErrors($validator);
        }

        $item = $this->items->find($id);
        $album = $item->albums()->first();

        
        $image_num = count($request->image);
        $image_db_num = count($item->albums()->first()->images()->get());
        $total_image_num = $image_num + $image_db_num;

        //return dd($total_image_num);
        if($total_image_num > 3) {
            return redirect()->back()->withErrors('Cannot Upload 3');
        }



        $images = $this->images->uploadImage($request->all(), Auth::id(), 'images/auctions'); 
        foreach($images as $image) {
        $image = $album->images()->create([
            'file_name' => $image->basename,
            'file_mime' => $image->mime,
            'file_path'  => '/images/auctions/' . $image->basename,
            'description' => $image->basename
        ]);
        }

        return redirect()->route('get.auction.item.edit', ['auction' =>  $item->type==0 ? 'bid' : 'seek','id' =>  $id ]);
    }

    public function destroyImage($id)
    {
        //$album = $this->items->find($id)->albums->first()->delete();
        $image = $this->images->find($id)->album()->first()->images()->get();
        //return dd($image);
        //return $this->images->deleteImageFile();

        if(count($image) > 1){
            $this->images->deleteImageFile($image->find($id)->toArray(), 'images/auctions');
            $item = $this->images->delete($id);
            return redirect()->back()->withInput();
        }
        
        return redirect()->back()->withErrors('need 1 Photo');
    }

    public function postBidItem(Request $request, $id)
    {
        $item = $this->items->find($id);

        if($item->type==0){
            //拍賣
            $item_user = $item->users()
                ->orderBy('item_user.price', 'desc')
                ->get();
            if(count($item->users()->get()) == 0){
                $item_min = $item->price;
            }else{
                $item_min = $item_user->first()->pivot->price + 1;
            }
           
            //$max_price
            $validator = Validator::make($request->all(), [
                'price' => 'required|integer|min:'. $item_min,
            ]);
        }else{
            //競投
            $item_user = $item->users()
                ->orderBy('item_user.price', 'asc')
                ->get();
            if(count($item->users()->get()) == 0){
                $item_max = $item->price;
            }else{
                $item_max = $item_user->first()->pivot->price - 1;
            }
           
            //$max_price
            $validator = Validator::make($request->all(), [
                'price' => 'required|integer|max:'. $item_max,
            ]);

        }

        if ($validator->fails()) {
            return redirect()->back()
                        ->withErrors($validator)
                        ->withInput();
        }

        $item->users()->attach(Auth::id(), ['price' => $request->price]);
        //$now = Carbon::now();
        //$end_time = Carbon::now()->addDays(7);
        $item->end_time = Carbon::now()->addDays(1);
        $item->save();
        //$user = $this->users->find(Auth::id());
        //$user->items()->attach($id, ['price' => $request->price]);
	



	return redirect()->back();
    }

    // For Testing
    public function getAdminAPI()
    {
        $user = $this->users->find(Auth::id());
        $item = $this->items->find(4);
        return dd($item->user()->associate($user)->save());

        return \Response::json([
            'data' => $items
            ],200);
        return View('auctions.items.admin', compact('items'));
    }


    public function postComment(CommentRequest $request, $id)
    {
        
        $item = $this->items->find($id);
        $comment = $item->comments()->create(['user_id' => Auth::id(), 'content' => $request->content]);
        return redirect()->back();
    }

    public function postReport(Request $request, $id)
    {
        
        $item = $this->items->find($id);
        $report = $item->reports()->create(['user_id' => Auth::id(), 'content' => $request->content]);
        
        //舉報三次自動disable
        if($item->reports()->count()>=3){
            $item->disabled=1;
            $item->save();
        }


        return redirect()->back();
    }

    public function postRepost(Request $request, $id)
    {
        $item = $this->items->find($id);
        $start_time = Carbon::now();
        $end_time = Carbon::now()->addDays(30);

        $item->start_time = $start_time;
        $item->end_time = $end_time;
        $item->repost = $item->repost+1;
        $item->save();

        return redirect()->back();
    }

}
